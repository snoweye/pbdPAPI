% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/papi_event.r
\name{papi.start}
\alias{papi.start}
\alias{papi.stop}
\alias{system.event}
\title{Low Level Interface}
\usage{
papi.start(events)

papi.stop(events)

system.event(expr, events, gcFirst = TRUE, burnin = TRUE)
}
\arguments{
\item{events}{A vector of PAPI events (as strings).  See details section for
more information.}

\item{expr}{A valid R expression to be profiled.}

\item{gcFirst}{logical; determines if garbage collection should be called
before profiling.}

\item{burnin}{logical; determines if the function should first be evaluated
with an empty expression. This can be especially important for measuring
cache effects.}
}
\value{
The results of the requested PAPI events are returned, in a named
list, with values stored in double precision.
}
\description{
Low level interface for pbdPAPI.
}
\details{
This is the low-level interface for accessing hardware counters, and should
look somewhat similar to PAPI's own low-level interface.  This offers a
great deal of control, at the expense of ease of use.  If you are new to
pbdPAPI and/or PAPI, it is recommended that you start with the higher level
interfaces.

To use, you should first construct an events vector, which consists of a set
of pre-specified strings (listed in detail below; scroll down, you can't
miss it).  For example, if you want to profile level 1 and level 2 data
cache misses, you would set

\tabular{c}{ 
   \code{events <- c("PAPI_L1_DCM", "PAPI_L2_DCM")} 
}

You would then enclose the code you wish to profile with a call to
\code{papi.start(events)}, call that code, then call
\code{papi.stop(events)} to end profiling.

Another version of the low-level interface is in the \code{system.event()}
function, which has syntax reminiscent of \code{system.time()}.  Using this
instead of \code{papi.start()} and \code{papi.stop()} in the above example,
you would instead call \code{system.event(expr, events)}, where \code{expr}
is the valid R expression you want profiled.
}
\examples{
\dontrun{
library(pbdPAPI)

events <- c("PAPI_L1_DCM", "PAPI_L2_DCM")

# Start profiling
papi.start(which=events)

# Computationally interesting code
sum(sapply(1:100, sqrt))

# Stop profiling and collect results
results <- papi.stop(which=events)
results
}

}

